// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.go

// Package thyella is a generated GoMock package.
package thyella

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockK8sAccessor is a mock of K8sAccessor interface
type MockK8sAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockK8sAccessorMockRecorder
}

// MockK8sAccessorMockRecorder is the mock recorder for MockK8sAccessor
type MockK8sAccessorMockRecorder struct {
	mock *MockK8sAccessor
}

// NewMockK8sAccessor creates a new mock instance
func NewMockK8sAccessor(ctrl *gomock.Controller) *MockK8sAccessor {
	mock := &MockK8sAccessor{ctrl: ctrl}
	mock.recorder = &MockK8sAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockK8sAccessor) EXPECT() *MockK8sAccessorMockRecorder {
	return m.recorder
}

// GetNodeList mocks base method
func (m *MockK8sAccessor) GetNodeList(ctx context.Context) ([]*Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeList", ctx)
	ret0, _ := ret[0].([]*Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeList indicates an expected call of GetNodeList
func (mr *MockK8sAccessorMockRecorder) GetNodeList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeList", reflect.TypeOf((*MockK8sAccessor)(nil).GetNodeList), ctx)
}

// Purge mocks base method
func (m *MockK8sAccessor) Purge(ctx context.Context, node *Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Purge", ctx, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// Purge indicates an expected call of Purge
func (mr *MockK8sAccessorMockRecorder) Purge(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockK8sAccessor)(nil).Purge), ctx, node)
}
